/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: p.proto */

#ifndef PROTOBUF_C_p_2eproto__INCLUDED
#define PROTOBUF_C_p_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Reg__XLRegMsg Reg__XLRegMsg;
typedef struct _Reg__XLRegMsg__Token Reg__XLRegMsg__Token;


/* --- enums --- */

typedef enum _Reg__XLRegMsg__Tag {
  REG__XLREG_MSG__TAG__RegCredRequest = 1,
  /*
   * version, token (other registry credentials)
   */
  REG__XLREG_MSG__TAG__RegCredReply = 2,
  /*
   * token OR clientID, digSig
   */
  REG__XLREG_MSG__TAG__Client = 3,
  /*
   * clientID, attrs
   */
  REG__XLREG_MSG__TAG__ClientOK = 4,
  /*
   * size means cluster size, constrained to 1 < n <= 64
   * epCount is number of menber endPoints, which must be 1 or 2
   */
  /*
   * clusterName, size, epCount
   */
  REG__XLREG_MSG__TAG__Create = 5,
  /*
   * clusterID, size, epCount
   */
  REG__XLREG_MSG__TAG__CreateReply = 6,
  /*
   * Response to Join is clusterID + size + epCount -OR- error
   */
  /*
   * clusterName or clusterID
   */
  REG__XLREG_MSG__TAG__Join = 7,
  /*
   * clusterID, attrs, size, epCount
   */
  REG__XLREG_MSG__TAG__JoinReply = 8,
  /*
   * clusterID, which = bit vector; -1 = all
   */
  REG__XLREG_MSG__TAG__GetCluster = 9,
  /*
   * Response to Get is a list of known members -OR- error
   */
  /*
   * clusterID, which, tokens
   */
  REG__XLREG_MSG__TAG__ClusterMembers = 10,
  /*
   * from client
   */
  REG__XLREG_MSG__TAG__Bye = 11,
  /*
   * from server; followed by close
   */
  REG__XLREG_MSG__TAG__Ack = 12,
  /*
   * errDesc; from server, followed by close
   */
  REG__XLREG_MSG__TAG__Error = 13
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REG__XLREG_MSG__TAG)
} Reg__XLRegMsg__Tag;

/* --- messages --- */

/*
 * the Token describes a member
 */
struct  _Reg__XLRegMsg__Token
{
  ProtobufCMessage base;
  char *name;
  /*
   * bit field
   */
  protobuf_c_boolean has_attrs;
  uint64_t attrs;
  /*
   * 20 or 32 byte nodeID
   */
  protobuf_c_boolean has_id;
  ProtobufCBinaryData id;
  protobuf_c_boolean has_commskey;
  ProtobufCBinaryData commskey;
  protobuf_c_boolean has_sigkey;
  ProtobufCBinaryData sigkey;
  /*
   * by convention, MyEnds[0] for inter-cluster comms, 
   * MyEnds[1] for cluster-client comms
   * there must be epCount endPoints present
   */
  /*
   * overlay, endPoint
   */
  size_t n_myends;
  char **myends;
  /*
   * over fields present, in order
   */
  protobuf_c_boolean has_digsig;
  ProtobufCBinaryData digsig;
};
#define REG__XLREG_MSG__TOKEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reg__xlreg_msg__token__descriptor) \
    , NULL, 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,NULL, 0,{0,NULL} }


struct  _Reg__XLRegMsg
{
  ProtobufCMessage base;
  protobuf_c_boolean has_op;
  Reg__XLRegMsg__Tag op;
  protobuf_c_boolean has_aesiv;
  ProtobufCBinaryData aesiv;
  protobuf_c_boolean has_aeskey;
  ProtobufCBinaryData aeskey;
  /*
   * error if len < 8
   */
  protobuf_c_boolean has_salt1;
  ProtobufCBinaryData salt1;
  /*
   * error if len < 8
   */
  protobuf_c_boolean has_salt2;
  ProtobufCBinaryData salt2;
  /*
   * little-endian, so stored D.C.B.A
   */
  protobuf_c_boolean has_version;
  uint32_t version;
  char *clientname;
  protobuf_c_boolean has_clientid;
  ProtobufCBinaryData clientid;
  protobuf_c_boolean has_clientattrs;
  uint64_t clientattrs;
  Reg__XLRegMsg__Token *clientspecs;
  protobuf_c_boolean has_clusterid;
  ProtobufCBinaryData clusterid;
  char *clustername;
  protobuf_c_boolean has_clustersize;
  uint32_t clustersize;
  protobuf_c_boolean has_clusterattrs;
  uint64_t clusterattrs;
  /*
   * each member must have
   */
  protobuf_c_boolean has_endpointcount;
  uint32_t endpointcount;
  /*
   * bitset, members requested/sent 
   */
  protobuf_c_boolean has_which;
  uint64_t which;
  /*
   * specs for members
   */
  size_t n_tokens;
  Reg__XLRegMsg__Token **tokens;
  protobuf_c_boolean has_digsig;
  ProtobufCBinaryData digsig;
  char *errdesc;
};
#define REG__XLREG_MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&reg__xlreg_msg__descriptor) \
    , 0,0, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,{0,NULL}, 0,0, NULL, 0,{0,NULL}, 0,0, NULL, 0,{0,NULL}, NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL, 0,{0,NULL}, NULL }


/* Reg__XLRegMsg__Token methods */
void   reg__xlreg_msg__token__init
                     (Reg__XLRegMsg__Token         *message);
/* Reg__XLRegMsg methods */
void   reg__xlreg_msg__init
                     (Reg__XLRegMsg         *message);
size_t reg__xlreg_msg__get_packed_size
                     (const Reg__XLRegMsg   *message);
size_t reg__xlreg_msg__pack
                     (const Reg__XLRegMsg   *message,
                      uint8_t             *out);
size_t reg__xlreg_msg__pack_to_buffer
                     (const Reg__XLRegMsg   *message,
                      ProtobufCBuffer     *buffer);
Reg__XLRegMsg *
       reg__xlreg_msg__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   reg__xlreg_msg__free_unpacked
                     (Reg__XLRegMsg *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Reg__XLRegMsg__Token_Closure)
                 (const Reg__XLRegMsg__Token *message,
                  void *closure_data);
typedef void (*Reg__XLRegMsg_Closure)
                 (const Reg__XLRegMsg *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor reg__xlreg_msg__descriptor;
extern const ProtobufCMessageDescriptor reg__xlreg_msg__token__descriptor;
extern const ProtobufCEnumDescriptor    reg__xlreg_msg__tag__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_p_2eproto__INCLUDED */
